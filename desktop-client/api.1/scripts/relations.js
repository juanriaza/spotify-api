require(["$api/models","$api/private/relationsartist"],function(b,e){function n(a,i,h){var d=[];if(0!=h){var l=b.Promise.join([e.artistSubscriptions(a),c.forUser(b.User.fromURI(a)).subscriptions.snapshot()]),f=new b.Promise;l.done(function(b){var a=b[0].map(function(b){return b.uri}),b=b[1].toURIs(),a=a.concat(b);e.categorizeUsersAndArtists(a).done(function(b){f.setDone(b)}).fail(function(b,a){f.setFail(a)})});l.fail(function(b,a){f.setFail(a)});d.push(f)}var g=e.combinedSubscriptionCount(a);d.push(g);
var k=new b.Promise;b.Promise.join(d).done(function(){var a={array:[]};if(0!=h){a.metadata=[];var c,d=f.object;for(c=0;c<d.artistUris.length;c++){var e=d.artistUris[c];0<=d.mergedUris.indexOf(e)||(a.array.push(e),a.metadata.push({artist:e,user:null}))}for(c=0;c<d.userUris.length;c++)e=b.User.fromURI(d.userUris[c]),e.artist?(a.array.unshift(e.uri),a.metadata.unshift({artist:e.artist.uri,user:e.uri})):(a.array.push(e.uri),a.metadata.push({artist:null,user:e.uri}));if(i||-1<h)c=i+(-1<h?h:a.array.length),
a.array=a.array.slice(i,c),a.metadata=a.metadata.slice(i,c)}a.length=g.object;k.setDone(a)}).fail(function(a,b){k.setFail(b)});return k}function c(a){b.BridgeLoadable.call(this);a=b.User.fromURI(a);this.resolve("owner",a);this.resolve("subscribers",new b.BridgeCollection(b.User,null,"relations_subscribers_users",a.uri));this.resolve("subscriptions",new b.BridgeCollection(b.User,null,"relations_subscriptions_users",a.uri));this.resolve("combinedSubscriptions",new b.Collection(b.Profile,null,n,a.uri))}
function d(a){c.call(this,a);this.resolve("blocked",new b.BridgeCollection(b.User,null,"relations_blocked_users",this.owner.uri));this.resolve("dismissed",new b.BridgeCollection(b.User,null,"relations_dismissed_users",this.owner.uri));this.resolve("hidden",new b.BridgeCollection(b.User,null,"relations_hidden_users",this.owner.uri));b.User.getOrCreateRelationsListener().proxyTo(this)}function j(a){for(var e=0;e<a.uris.length;e++)b.User.fromURI(a.uris[e]).load("artist").done(function(b){b.artist&&b.artist.resolve("subscribed",
"add"==a.type)});c.forCurrentUser().eventDone({type:a.type,receiver:"combinedSubscriptions",uris:a.uris})}SP.inherit(c,b.BridgeLoadable);c.fromURI=b.Cache.lookup;c._cache=new b.Cache(c);b.Loadable.define(c,["owner","subscribers","subscriptions","combinedSubscriptions"]);SP.inherit(d,c);b.Loadable.define(d,["blocked","dismissed","hidden"]);d.prototype.block=function(a){return b.promisedRequest(this,"relations_block",[this.owner.uri].concat(SP.uris(arguments)))};d.prototype.dismiss=function(a){return b.promisedRequest(this,
"relations_dismiss",[this.owner.uri].concat(SP.uris(arguments)))};d.prototype.subscribe=function(a){return this._changeRelation(SP.uris(arguments),e.Relationship.SUBSCRIBED)};d.prototype.unblock=function(a){return b.promisedRequest(this,"relations_unblock",[this.owner.uri].concat(SP.uris(arguments)))};d.prototype.unsubscribe=function(a){return this._changeRelation(SP.uris(arguments),e.Relationship.NOT_SUBSCRIBED)};d.prototype._changeRelation=function(a,c){var d=new b.Promise,j=c===e.Relationship.SUBSCRIBED?
"subscribe":"unsubscribe";e.categorizeUsersAndArtists(a).done(this,function(a){var f=[];if(a.userUris.length){var g=b.promisedRequest(this,"relations_"+j,[this.owner.uri].concat(a.userUris));g.done(this,function(){e.updateCache(a.mergedUris,c)});f.push(g)}a.artistUris.length&&(g=e.changeRelation(a.artistUris,c),g.done(this,function(b){var d=a.artistUris;b[0]&&b[0].reply&&(d=d.filter(function(a){return-1==b[0].reply.indexOf(a.substr(15))}));d.length&&this.eventDone({type:c===e.Relationship.SUBSCRIBED?
"add":"remove",receiver:"combinedSubscriptions",uris:d})}),f.push(g));b.Promise.join(f).done(this,function(){d.setDone(this)}).fail(function(a,b){d.setFail(b)})});return d};c._currentUser=null;c.forCurrentUser=function(){c._currentUser||(c._currentUser=new d(b.session.user.uri));return c._currentUser};c.forUser=function(a){return c.fromURI(a.uri)};b.Loadable.define(b.Artist,["subscribed"],"_relations__temp_patch");b.Artist.prototype._relations__temp_patch=function(a){e.isSubscribed(this.uri).done(this,
function(b){this.resolveMany(a,{subscribed:b})}).fail(this,function(){this.resolveFail(a,{error:"Cannot load subscribed property"})})};var m=c.forCurrentUser().subscriptions;m.addEventListener("add",j);m.addEventListener("remove",j);exports.Relations=c});
